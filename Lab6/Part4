`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: Auburn University ELEC4200 Lab 6
// Engineer: Courtney Stewart
// 
// Create Date: 10/09/2023 12:19:31 PM
// Design Name: Lab 6
// Module Name: Task4
//////////////////////////////////////////////////////////////////////////////////

//generate 5MHz clock refresh rate ~500Hz

module Task4(
    input CLK100MHZ,
    input [3:0] v,
    output reg [7:0] TurnOn,
    output [6:0] control
    );

    reg [3:0] BCDValue;
    
    wire z;
    wire [3:0] m_out;
    
    fourBitBinaryToTwoDigitDecimal m1 (v, z, m_out);
    sevenSeg m2 (BCDValue, control);
    
    wire clk_out1;
    reg clk500Hz;
    
    integer clkDivider;

  clk_wiz_0 fiveMHz
   (
    // Clock out ports
    .clk_out1(clk_out1),     // output clk_out1
    // Status and control signals
    .locked(),       // output locked
   // Clock in ports
    .clk_in1(CLK100MHZ));      // input clk_in1
// INST_TAG_END ------ End INSTANTIATION Template ---------




    always @(posedge clk_out1)
        begin
            clkDivider <= (clkDivider > 9999) ? 0 : clkDivider +1;
            if (!clkDivider)
                clk500Hz <= !clk500Hz; 
        end
        
        
        
    always @*
        begin
            TurnOn <= (clk500Hz) ? 8'b11111110 : 8'b11111101;
            BCDValue <= (clk500Hz) ? m_out : {3'b000, z};
        end    
          
 endmodule




module fourBitBinaryToTwoDigitDecimal(
    input [3:0] v,
    output reg z,
    output reg [3:0] m_out
    );
    
    always @ (v)
    begin
        if(v>9) 
         begin                //check if v is greater than 9
            m_out=v-10;       //if it is, we need to subtract 10
            z=1;              //and set z = 1
         end   
        else    
        begin            
            m_out=v;        //otherwise m just equals v
            z=0;            //need to set z = 0
        end
    end
endmodule




module sevenSeg(
    input [3:0] v,
    output reg [6:0] seg0
    );

    
    always @ (v)
    begin
        case(v)
        0   :begin seg0 = 7'b0000001;  end
        1   :begin seg0 = 7'b1001111;  end
        2   :begin seg0 = 7'b0010010;  end
        3   :begin seg0 = 7'b0000110;  end
        4   :begin seg0 = 7'b1001100;  end
        5   :begin seg0 = 7'b0100100;  end
        6   :begin seg0 = 7'b0100000;  end
        7   :begin seg0 = 7'b0001111;  end
        8   :begin seg0 = 7'b0000000;  end
        9   :begin seg0 = 7'b0000100;  end
        default :begin seg0 = 7'b0000000; end
        endcase 
    end
endmodule
