`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: Auburn University ELEC4200 Lab 2
// Engineer: Courtney Stewart
// 
// Create Date: 09/06/2023 01:53:58 PM
// Design Name: Task 5
// Module Name: Task5
// 
//////////////////////////////////////////////////////////////////////////////////


module Task5(
    input[3:0] a,
    input[3:0] b,
    input cin,
    output cout,
    output reg [6:0] s,
    output [7:0] TurnOn
    );
    
assign TurnOn = 8'b11111110; //turns on particular 7-segment display
    
    always @ (a or b or cin)
    case(s)
    0   :s = 7'b0000001;
    1   :s = 7'b1001111;
    2   :s = 7'b0010010;
    3   :s = 7'b0000110;
    4   :s = 7'b1001100;
    5   :s = 7'b0100100;
    6   :s = 7'b0100000;
    7   :s = 7'b0001111;
    8   :s = 7'b0000000;
    9   :s = 7'b0000100;
    default :s = 7'bx;
    endcase 
    
endmodule



module oneBitFullAdder(
    input a,                 
    input b,
    input cin,
    output cout,
    output s
    );
    wire xor1, and1, and2;
    assign xor1 = a ^ b;
    assign and2 = a & b;
    assign and1 = xor1 & cin;
    assign cout = and1 | and2;
    assign s = xor1 ^ cin;
endmodule

module fourBitRippleCarryAdder(
    input[3:0] a,
    input[3:0] b,
    input cin,
    output cout,
    output [3:0] s
);
    wire cout1, cout2, cout3;
oneBitFullAdder(.a(a[0]), .b(b[0]), .cin(cin), .s(s[0]), .cout(cout1));
oneBitFullAdder(.a(a[1]), .b(b[1]), .cin(cout1), .s(s[1]), .cout(cout2));
oneBitFullAdder(.a(a[2]), .b(b[2]), .cin(cout2), .s(s[2]), .cout(cout3));
oneBitFullAdder(.a(a[3]), .b(b[3]), .cin(cout3), .s(s[3]), .cout(cout));
endmodule


